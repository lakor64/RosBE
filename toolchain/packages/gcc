# allow to build mingw runtime
gcc_version="8.4.0"

declare -A rs_sources=(
	["gcc.tar.xz"]="https://ftp.gnu.org/gnu/gcc/gcc-${gcc_version}/gcc-${gcc_version}.tar.xz"
)

declare -A rs_sha256sums=(
	["gcc.tar.xz"]="e30a6e52d10e1f27ed55104ad233c30bd1e99cfb5ff98ab022dc941edd1b2dd4"
)

rs_prepare() {
	rs_extract_module "gcc" "$rs_workdir/gcc" "tar.xz"
}

rs_build() {
	export CFLAGS_FOR_TARGET="$rs_target_cflags"
	export CXXFLAGS_FOR_TARGET="$rs_target_cxxflags"

	rs_do_command "$rs_workdir/gcc/gcc-${gcc_version}/configure" --prefix="$rs_prefixdir" --target="$rs_target" --with-sysroot="$rs_prefixdir" --with-pkgversion="RosBE" --enable-languages=c,c++ --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-shared --disable-multilib --disable-nls --disable-werror --disable-win32-registry --enable-sjlj-exceptions --disable-libstdcxx-verbose $rs_host_autoconf
	rs_do_command $rs_makecmd -j $rs_cpucount all-gcc
	rs_do_command $rs_makecmd install-gcc
	rs_do_command $rs_makecmd install-lto-plugin
	rs_do_command $rs_makecmd -j $rs_cpucount
	rs_do_command $rs_makecmd install

	unset CFLAGS_FOR_TARGET
	unset CXXFLAGS_FOR_TARGET
}

rs_check() {
    if [ -e "$rs_prefixdir/bin/$rs_target-gcc$rs_suffix" ] ; then
        return 1
    fi
    return 0
}

rs_prepare_check() {
	if [ -e "$rs_workdir/gcc/gcc-${gcc_version}" ] ; then
		return 1
	fi
	return 0
}
